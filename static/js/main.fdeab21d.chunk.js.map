{"version":3,"sources":["data/TimeWeightedBalance.js","data/data.js","data/useSubject.js","components/Distribution.js","index.js"],"names":["NUMERATOR","BigInt","TimeWeightedBalance","startingBalance","startBlockNumber","this","acc","current","lastSeen","amount","now","supply","_update","Error","timePast","web3","Web3","dataStore","distribution","BehaviorSubject","setBalances","balances","next","TRANSFER_HASH","utils","sha3","POOL","ZERO_ADDRESS","repeat","STARTED_BLOCK","CREATED_BLOCK","USER_STATES","Map","TOTAL_SUPPLY","fetchInitialData","a","eth","getPastLogs","fromBlock","toBlock","address","topics","forEach","l","from","substr","to","data","_add","toUser","get","set","_sub","fromUser","fetchDistributionData","endBlock","applyLog","calculateDistribution","console","log","reduce","distributionPercent","map","d","i","id","proportionTimeTotal","Array","entries","addr","bal","Number","finalize","sort","b","blockNumber","prevSupply","mint","add","rebalance","burn","sub","excludedAddr","keys","includes","_","once","time","getBlockNumber","currentBlockNumber","timeEnd","useSubject","subject","initValue","undefined","useState","getValue","value","setValue","useEffect","subscription","subscribe","newValue","unsubscribe","Distribution","Box","align","DataTable","columns","property","header","Text","primary","render","datum","style","fontFamily","Stack","anchor","Meter","values","thickness","size","direction","pad","bottom","weight","App","Grommet","theme","grommet","Heading","level","Component","document","getElementById"],"mappings":"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","file":"static/js/main.fdeab21d.chunk.js","sourcesContent":["/* global BigInt */\n\nexport const NUMERATOR = BigInt(1e18)\n\nexport default class TimeWeightedBalance {\n    lastSeen;\n    current;\n    acc;\n\n    constructor(startingBalance, startBlockNumber) {\n        this.acc = BigInt(0)\n        this.current = startingBalance\n        this.lastSeen = startBlockNumber\n    }\n\n    add(amount, now, supply) {\n        this._update(supply, now);\n        this.current += amount\n    }\n\n    _add(amount, now) {\n        this.lastSeen = now\n        this.current += amount\n    }\n\n    _sub(amount, now) {\n        this.lastSeen = now\n        this.current -= amount\n    }\n\n    sub(amount, now, supply) {\n        this._update(supply, now);\n        this.current -= amount\n    }\n\n    _update(supply, now) {\n        if (now < this.lastSeen) {\n            throw new Error(\"downTime\")\n        }\n        const timePast = now - this.lastSeen;\n        this.acc += (this.current * NUMERATOR / supply) * BigInt(timePast)\n        this.lastSeen = now\n    }\n\n    finalize(now, supply) {\n        const timePast = now - this.lastSeen;\n        return this.acc + (this.current * NUMERATOR / supply) * BigInt(timePast)\n    }\n}","/* global BigInt */\nimport _ from 'lodash'\nimport * as Web3 from 'web3'\nimport TimeWeightedBalance, { NUMERATOR } from \"./TimeWeightedBalance\";\n\nimport { BehaviorSubject } from 'rxjs'\n\nconst isDev = process.env.NODE_ENV === 'development'\nconst apiKey = isDev ? 'db72eb2275564c62bfa71896870d8975' : '3c3dfdec6ce94abc935977aa995d1a8c'\nexport const web3 = new Web3(`https://mainnet.infura.io/v3/${apiKey}`)\n\nexport let data = []\n\nconst dataStore = {\n    distribution: new BehaviorSubject([]),\n\n    setBalances(balances) {\n        dataStore.distribution.next(balances)\n    },\n}\n\n\nconst TRANSFER_HASH = web3.utils.sha3('Transfer(address,address,uint256)');\nconst POOL = '0x49519631B404E06ca79C9C7b0dC91648D86F08db'\nconst ZERO_ADDRESS = '0x' + '0'.repeat(40)\nconst STARTED_BLOCK = 11_731_951;\nconst CREATED_BLOCK = 11_717_846;\nconst USER_STATES = new Map()\nconst TOTAL_SUPPLY = new TimeWeightedBalance(BigInt(0), STARTED_BLOCK);\n\nconst initialize = () => _.once(async () => {\n    console.time('distr')\n    const currentBlockNumber = await web3.eth.getBlockNumber();\n    await fetchInitialData();\n    await fetchDistributionData(currentBlockNumber);\n    console.timeEnd('distr')\n\n})()\n\nasync function fetchInitialData() {\n    const logs = await web3.eth.getPastLogs({\n        fromBlock: CREATED_BLOCK,\n        toBlock: STARTED_BLOCK,\n        address: POOL,\n        topics: [TRANSFER_HASH]\n    })\n    logs.forEach(l => {\n\n        const from = `0x${l.topics[1].substr(26)}`\n        const to = `0x${l.topics[2].substr(26)}`\n        const amount = BigInt(l.data)\n\n        if (from === ZERO_ADDRESS) {\n\n            TOTAL_SUPPLY._add(amount, STARTED_BLOCK)\n\n            const toUser = USER_STATES.get(to)\n            if (toUser) {\n                toUser._add(amount, STARTED_BLOCK)\n            } else {\n                USER_STATES.set(to, new TimeWeightedBalance(amount, STARTED_BLOCK))\n            }\n\n        } else if (to === ZERO_ADDRESS) {\n\n            TOTAL_SUPPLY._sub(amount, STARTED_BLOCK)\n\n            const fromUser = USER_STATES.get(from)\n            if (fromUser) {\n                fromUser._sub(amount, STARTED_BLOCK)\n            } else {\n                throw new Error(\"from unknown\")\n            }\n\n        } else {\n\n            const fromUser = USER_STATES.get(from)\n            if (fromUser) {\n                fromUser._sub(amount, STARTED_BLOCK)\n            } else {\n                throw new Error(\"from unknown\")\n            }\n\n            const toUser = USER_STATES.get(to)\n            if (toUser) {\n                toUser._add(amount, STARTED_BLOCK)\n            } else {\n                USER_STATES.set(to, new TimeWeightedBalance(amount, STARTED_BLOCK))\n            }\n\n        }\n\n    })\n}\n\nasync function fetchDistributionData(endBlock) {\n    const logs = await web3.eth.getPastLogs({\n        fromBlock: STARTED_BLOCK,\n        toBlock: endBlock,\n        address: POOL,\n        topics: [TRANSFER_HASH]\n    })\n    logs.forEach(l => applyLog(l))\n    const balances = calculateDistribution(endBlock)\n    console.log(balances.reduce((acc, { distributionPercent }) => acc + distributionPercent, 0))\n    dataStore.setBalances(balances.map((d, i) => ({...d, id: i+1})))\n}\n\nfunction calculateDistribution(endBlock) {\n    const proportionTimeTotal = BigInt(endBlock - STARTED_BLOCK) * NUMERATOR\n    const supply = TOTAL_SUPPLY.current\n    return Array.from(USER_STATES.entries()).map(([addr, bal]) => ({\n        address: addr,\n        // lastSeen: bal.lastSeen,\n        // current: bal.current,\n        // acc: bal.finalize(endBlock),\n        distributionPercent: Number(bal.finalize(endBlock, supply) * BigInt(1_000_000) / proportionTimeTotal) / 10000,\n    })).sort(({ distributionPercent: a }, { distributionPercent: b }) => {\n        if (a < b) return 1\n        if (a > b) return -1\n        return 0\n    })\n}\n\nfunction applyLog(log) {\n    const from = `0x${log.topics[1].substr(26)}`\n    const to = `0x${log.topics[2].substr(26)}`\n    const amount = BigInt(log.data)\n    const now = log.blockNumber\n\n\n    const prevSupply = TOTAL_SUPPLY.current\n\n    if (from === ZERO_ADDRESS) {\n\n        mint(amount, now)\n\n        const toUser = USER_STATES.get(to)\n        if (toUser) {\n            toUser.add(amount, now, prevSupply)\n        } else {\n            USER_STATES.set(to, new TimeWeightedBalance(amount, now))\n        }\n\n        rebalance(prevSupply, now, [toUser])\n\n    } else if (to === ZERO_ADDRESS) {\n\n        burn(amount, now)\n\n        const fromUser = USER_STATES.get(from)\n        if (fromUser) {\n            fromUser.sub(amount, now, prevSupply)\n        } else {\n            throw new Error(\"from unknown\")\n        }\n\n        rebalance(prevSupply, now, [fromUser])\n\n    } else {\n\n        const fromUser = USER_STATES.get(from)\n        if (fromUser) {\n            fromUser.sub(amount, now, prevSupply)\n        } else {\n            throw new Error(\"from unknown\")\n        }\n\n        const toUser = USER_STATES.get(to)\n        if (toUser) {\n            toUser.add(amount, now, prevSupply)\n        } else {\n            USER_STATES.set(to, new TimeWeightedBalance(amount, log.blockNumber))\n        }\n\n    }\n\n}\n\nfunction rebalance(supply, now, excludedAddr) {\n    Array.from(USER_STATES.keys()).forEach(addr => {\n        if (excludedAddr.includes(addr)) return\n        const userState = USER_STATES.get(addr)\n        userState._update(supply, now)\n    })\n}\n\nfunction burn(amount, now) {\n    TOTAL_SUPPLY._sub(amount, now)\n}\n\nfunction mint(amount, now) {\n    TOTAL_SUPPLY._add(amount, now)\n}\n\ninitialize();\n\nexport default dataStore\n\n\n","import { useEffect, useState } from 'react'\n\nfunction useSubject(subject, initValue = undefined) {\n    // if useSubject provided with initValue use it, else use subject value\n    const [value, setValue] = useState(initValue || subject.getValue())\n\n    useEffect(() => {\n        const subscription = subject.subscribe(newValue => {\n            setValue(newValue)\n        })\n        return () => subscription.unsubscribe()\n    })\n\n    return value\n}\n\nexport default useSubject\n","import React from \"react\";\n\nimport {Box, DataTable, Meter, Stack, Text} from \"grommet\";\nimport dataStore from \"../data/data\";\nimport useSubject from \"../data/useSubject\";\n\nexport const Distribution = () => {\n    const balances = useSubject(dataStore.distribution)\n    return (\n        <>\n        <Box align='center'>\n            <DataTable\n            columns={[\n                {\n                    property: 'id',\n                    header: <Text>#</Text>,\n                    primary: true,\n                },\n                {\n                    property: 'address',\n                    header: <Text>Address</Text>,\n                    render: datum => <Text style={{ fontFamily: 'monospace' }}>{datum.address}</Text>,\n                },\n                {\n                    property: 'destribution',\n                    header: 'Distribution',\n                    render: datum => (\n                        <Stack anchor=\"center\">\n                            <Box>\n                                <Meter\n                                    values={[{ value: datum.distributionPercent }]}\n                                    thickness=\"medium\"\n                                    size=\"medium\"\n                                />\n                            </Box>\n                            <Box direction=\"row\" align=\"center\" pad={{ bottom: 'xsmall' }}>\n                                <Text size=\"xlarge\" weight=\"bold\">\n                                    {datum.distributionPercent}\n                                </Text>\n                                <Text size=\"small\">%</Text>\n                            </Box>\n                        </Stack>\n                    ),\n                },\n            ]}\n            data={balances}\n        />\n        </Box>\n        </>\n    )\n}\n","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\n\nimport { Box, Grommet, Heading } from \"grommet\";\nimport { grommet } from \"grommet/themes\";\nimport { Distribution } from \"./components/Distribution\";\n\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Grommet theme={grommet}>\n                <Box align=\"center\" pad=\"large\">\n                    <Heading level=\"3\">Realtime Component LP rewards distribution</Heading>\n                </Box>\n                <Distribution />\n            </Grommet>\n        );\n    }\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}